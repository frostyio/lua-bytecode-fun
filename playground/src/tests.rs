#[test]
fn reader_writer() {
	use bytecode::lua51::{Reader, Writer};

	let mut writer = Writer::new();
	writer.byte(0x01);
	writer.bytes(vec![0x02, 0x03]);
	writer.int(0x4, 4);
	writer.string("test", 4);
	writer.number(5f64, 4);

	let slice = writer.as_bytes();
	let mut reader = Reader::new(slice);
	
	assert_eq!(*reader.byte(), 0x1);
	assert_eq!(reader.bytes(2), &[0x02, 0x03]);
	assert_eq!(reader.int(4), 0x04);
	assert_eq!(reader.string(4), "test");
	assert_eq!(reader.number(4), 5f64);
}

#[test]
fn basic_read_and_dump() {
	use bytecode;

	// test file
	let test_out = vec![0x1B, 0x4C, 0x75, 0x61, 0x51, 0x00, 0x01, 0x04, 0x04, 0x04, 0x08, 0x00, 0x0F, 0x00, 0x00, 0x00,
								0x40, 0x74, 0x65, 0x73, 0x74, 0x5F, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x6C, 0x75, 0x61, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x06, 0x00, 0x00, 0x00, 0x01,
								0x00, 0x00, 0x00, 0x0C, 0x40, 0x40, 0x00, 0x45, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x5C,
								0x40, 0x00, 0x01, 0x1E, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F, 0x04, 0x06, 0x00,
								0x00, 0x00, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
								0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
								0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
								0x61, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
	
	// deserialize
	let (header, proto) = bytecode::lua51::deserialize_bytecode(test_out.as_slice());

	// serialize
	let bytes = bytecode::lua51::serialize_bytecode(&header, &proto);
	assert_eq!(bytes, test_out);

}